# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ncyTwMs1PmbR55uDPQ-ndtiftXAie-P1
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt

# Step 1: Load CSV file into a pandas DataFrame
data = pd.read_csv('/content/vehicle_data.csv')  # Assuming your CSV file has 10,000 records

# Step 2: Data Preprocessing
# Example: Handling missing values by dropping rows with any missing value
data.dropna(inplace=True)

# Step 3: Feature Engineering
# Example: No feature engineering in this basic example

# Step 4: Convert categorical variables to numerical using one-hot encoding
data = pd.get_dummies(data, columns=['color'])

# Step 5: Split data into features and target variable
X = data.drop('vehicle_type', axis=1)  # Assuming 'vehicle_type' is the target column
y = data['vehicle_type']

# Step 6: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 7: Model Selection and Training
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 8: Predicting and printing the vehicle type
def predict_vehicle(features):
    # Convert the input features to DataFrame and perform one-hot encoding if necessary
    features_df = pd.DataFrame([features])
    if 'color' in features_df.columns:
        features_df = pd.get_dummies(features_df, columns=['color'])
        # Realign the columns to match the training data
        features_df = features_df.reindex(columns=X_train.columns, fill_value=0)
    prediction = model.predict(features_df)[0]
    if prediction == 'car':
        print("It's a car.")
    elif prediction == 'bike':
        print("It's a bike.")
    else:
        print("Unknown vehicle type.")

# Example usage:
features = {'weight': 1500, 'height': 140, 'color': 'red', 'no_of_wheels': 4}
predict_vehicle(features)

# Step 9: Histogram
plt.hist(y, bins=3, color='skyblue', edgecolor='black')  # Using y instead of data['vehicle_type']
plt.xlabel('Vehicle Type')
plt.ylabel('Frequency')
plt.title('Histogram of Vehicle Types')
plt.show()